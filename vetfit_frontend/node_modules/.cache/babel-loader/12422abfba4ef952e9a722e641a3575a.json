{"ast":null,"code":"var _jsxFileName = \"/Users/aidanmatchette/dev/projects/vetfit_frontend/src/components/CoinChart/CoinChart.js\",\n    _s = $RefreshSig$();\n\nimport { Backdrop, Button, CircularProgress, createTheme } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport 'chart.js/auto';\nimport { Line } from 'react-chartjs-2';\nimport { CategoryScale } from 'react-chartjs-2';\nimport dashboardAPI from '../../api/dashboardAPI';\nimport { CryptoState } from '../../Context';\nimport './coinchart.css';\nimport LoadingDashboard from '../LoadingDashboard';\nimport { ThemeProvider } from '@emotion/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CoinChart = _ref => {\n  _s();\n\n  let {\n    coin\n  } = _ref;\n  const [graphData, setGraphData] = useState();\n  const [numDays, setNumDays] = useState(1);\n  const {\n    symbol,\n    currency\n  } = CryptoState();\n\n  const generateGraphData = async () => {\n    const data = await dashboardAPI.getGraphData(coin.id, numDays, currency);\n    setGraphData(data);\n  };\n\n  console.log('--------- Days ---------', numDays);\n  useEffect(() => {\n    generateGraphData();\n  }, [numDays, currency]);\n  console.log(numDays);\n\n  const handleNumOfDays = event => {\n    setNumDays(event.target.value);\n  }; // const data={ \n  //     labels: graphData?.map((dataPoint) => {\n  //         let date = new Date(dataPoint[0])\n  //         let time = date.getHours() > 12 \n  //             ? `${date.getHours() - 12}:${date.getMinutes()} pm`\n  //             : `${date.getHours()}:${date.getMinutes()} am`\n  //         return numDays !== 1 ? date.toLocaleDateString() : time\n  //     }),\n  //     datasets: [\n  //         {data: graphData?.map((dataPoint) => dataPoint[1])}\n  //     ]\n  // } \n\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: 'dark',\n      primary: {\n        main: \"rgb(91, 25, 129)\"\n      },\n      type: \"dark\"\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: darkTheme,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coin-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"num-buttons\",\n          onClick: handleNumOfDays,\n          variant: \"contained\",\n          sx: {\n            borderRadius: 10\n          },\n          value: 365,\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"num-buttons\",\n          onClick: handleNumOfDays,\n          variant: \"contained\",\n          sx: {\n            borderRadius: 10\n          },\n          value: 30,\n          children: \"Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"num-buttons\",\n          onClick: handleNumOfDays,\n          variant: \"contained\",\n          sx: {\n            borderRadius: 10\n          },\n          value: 1,\n          children: \"Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coin-graph\",\n        children: graphData ? /*#__PURE__*/_jsxDEV(Line, {\n          data: {\n            labels: graphData.map(dataPoint => {\n              let date = new Date(dataPoint[0]);\n              let time = date.getHours() > 12 ? `${date.getHours() - 12}:${date.getMinutes()} pm` : `${date.getHours()}:${date.getMinutes()} am`;\n              return numDays == 1 ? time : date.toLocaleDateString();\n            }),\n            datasets: [{\n              // backgroundColor: 'rgb(61, 52, 148)',\n              borderColor: '#8250AD',\n              data: graphData.map(dataPoint => dataPoint[1]),\n              label: `Price of ${coin.name} in ${symbol}`\n            }]\n          },\n          options: {\n            elements: {\n              point: {\n                radius: 1\n              }\n            },\n            scales: {\n              y: {\n                ticks: {\n                  color: 'white',\n                  size: 20\n                },\n                grid: {\n                  display: false,\n                  borderColor: 'white',\n                  borderWidth: 2\n                }\n              },\n              x: {\n                ticks: {\n                  color: 'white'\n                },\n                grid: {\n                  display: false,\n                  borderColor: 'white',\n                  borderWidth: 2\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(LoadingDashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blank-space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CoinChart, \"J1yFKBB4O0D78cu1pZ7H97jneFY=\");\n\n_c = CoinChart;\nexport default CoinChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinChart\");","map":{"version":3,"sources":["/Users/aidanmatchette/dev/projects/vetfit_frontend/src/components/CoinChart/CoinChart.js"],"names":["Backdrop","Button","CircularProgress","createTheme","React","useEffect","useState","Line","CategoryScale","dashboardAPI","CryptoState","LoadingDashboard","ThemeProvider","CoinChart","coin","graphData","setGraphData","numDays","setNumDays","symbol","currency","generateGraphData","data","getGraphData","id","console","log","handleNumOfDays","event","target","value","darkTheme","palette","mode","primary","main","type","borderRadius","labels","map","dataPoint","date","Date","time","getHours","getMinutes","toLocaleDateString","datasets","borderColor","label","name","elements","point","radius","scales","y","ticks","color","size","grid","display","borderWidth","x"],"mappings":"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","sourcesContent":["import { Backdrop, Button, CircularProgress, createTheme } from '@mui/material'\nimport React, { useEffect, useState } from 'react'\nimport 'chart.js/auto'\nimport { Line } from 'react-chartjs-2'\nimport { CategoryScale } from 'react-chartjs-2'\nimport dashboardAPI from '../../api/dashboardAPI'\nimport { CryptoState } from '../../Context'\nimport './coinchart.css'\nimport LoadingDashboard from '../LoadingDashboard'\nimport { ThemeProvider } from '@emotion/react'\n\nconst CoinChart = ({ coin }) => {\n\n    const [graphData, setGraphData] = useState()\n    const [numDays, setNumDays] = useState(1)\n\n    const {symbol, currency} = CryptoState();\n\n    const generateGraphData = async () => {\n       const data = await dashboardAPI.getGraphData(coin.id, numDays, currency) \n       setGraphData(data)\n    }\n    console.log('--------- Days ---------', numDays)\n    useEffect(() => {\n        generateGraphData()\n\n    }, [numDays, currency])\n    console.log(numDays);\n \n    const handleNumOfDays = (event) => {\n        setNumDays(event.target.value)\n\n    }\n    // const data={ \n    //     labels: graphData?.map((dataPoint) => {\n    //         let date = new Date(dataPoint[0])\n    //         let time = date.getHours() > 12 \n    //             ? `${date.getHours() - 12}:${date.getMinutes()} pm`\n    //             : `${date.getHours()}:${date.getMinutes()} am`\n    //         return numDays !== 1 ? date.toLocaleDateString() : time\n    //     }),\n    //     datasets: [\n    //         {data: graphData?.map((dataPoint) => dataPoint[1])}\n    //     ]\n    // } \n    const darkTheme = createTheme({\n        palette: {\n          mode: 'dark',\n          primary: {\n            main: \"rgb(91, 25, 129)\",\n          },\n          type: \"dark\",\n        },\n      });\n  return (\n    <ThemeProvider theme={darkTheme}> \n    <div className='coin-chart-container'>\n        <div className='chart-buttons'>\n            <Button className='num-buttons' onClick={handleNumOfDays} variant='contained' sx={{borderRadius: 10}} value={365} >Year</Button>\n            <Button className='num-buttons' onClick={handleNumOfDays} variant='contained' sx={{borderRadius: 10}} value={30} >Month</Button>\n            <Button className='num-buttons' onClick={handleNumOfDays} variant='contained' sx={{borderRadius: 10}} value={1} >Day</Button>\n        </div>\n        {/* <div className='graph-container'> */}\n            <div className='coin-graph'>\n            { graphData \n                    ? ( <Line data={{ \n                        labels: graphData.map((dataPoint) => {\n                            let date = new Date(dataPoint[0])\n                            let time = date.getHours() > 12 \n                                ? `${date.getHours() - 12}:${date.getMinutes()} pm`\n                                : `${date.getHours()}:${date.getMinutes()} am`\n                            return numDays == 1 ? time : date.toLocaleDateString() \n                        }),\n                        datasets: [\n                            {\n                                // backgroundColor: 'rgb(61, 52, 148)',\n                                borderColor: '#8250AD',\n                                data: graphData.map((dataPoint) => dataPoint[1]),\n                                label: `Price of ${coin.name} in ${symbol}`\n                            }\n                        ]  \n                    }}\n                    options={{\n                        elements: {\n                        point: {\n                            radius: 1,\n                        }\n                        },\n                        scales: {\n                            y: {\n                              ticks: { color: 'white', size: 20},\n                              grid: {display: false, borderColor: 'white', borderWidth: 2}\n                            },\n                            x: {\n                              ticks: { color: 'white'},\n                              grid: {display: false, borderColor: 'white', borderWidth: 2}\n                            }\n                          }\n                    }}\n\n                    /> \n                    ) : <LoadingDashboard />\n            }\n            </div>\n            <div className='blank-space'></div>\n        {/* </div> */}\n    </div>\n    </ThemeProvider>\n  )\n}\n\nexport default CoinChart"]},"metadata":{},"sourceType":"module"}