{"ast":null,"code":"import axios from \"axios\";\nimport { CryptoState } from \"../Context\"; // const {setIsAuthenticated} = CryptoState();\n\nconst getCSRFToken = () => {\n  let csrfToken;\n  const cookies = document.cookie.split(';');\n\n  for (let cookie of cookies) {\n    const crumbs = cookie.split('=');\n\n    if (crumbs[0].trim() === 'csrftoken') {\n      csrfToken = crumbs[1];\n    }\n  }\n\n  return csrfToken;\n};\n\nconst tryCatchFetch = async axiosCall => {\n  try {\n    const response = await axiosCall();\n    return response.data || {\n      message: 'success'\n    };\n  } catch (e) {\n    console.error(\"---- Error ----\", e.response ? e.response : e);\n    return null;\n  }\n};\n\nconst getDashboard = async currency => {\n  if (!currency) {\n    currency = 'usd';\n  }\n\n  return await tryCatchFetch(() => axios.get(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=market_cap_desc&per_page=100&page=1&sparkline=false`));\n};\n\nconst getTrendingDashboard = async currency => {\n  if (!currency) {\n    currency = 'usd';\n  }\n\n  return await tryCatchFetch(() => axios.get(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=gecko_desc&per_page=10&page=1&sparkline=false&price_change_percentage=24h`));\n};\n\nconst getCoin = async coinId => {\n  return await tryCatchFetch(() => axios.get(`https://api.coingecko.com/api/v3/coins/${coinId}`));\n};\n\nconst getGraphData = async (coinId, days, currency) => {\n  const data = await tryCatchFetch(() => axios.get(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=${currency}&days=${days}`));\n  return data.prices;\n};\n\nexport default {\n  getDashboard,\n  getTrendingDashboard,\n  getCoin,\n  getGraphData,\n  getCSRFToken\n};","map":{"version":3,"sources":["/Users/aidanmatchette/dev/projects/vetfit_frontend/src/api/dashboardAPI.js"],"names":["axios","CryptoState","getCSRFToken","csrfToken","cookies","document","cookie","split","crumbs","trim","tryCatchFetch","axiosCall","response","data","message","e","console","error","getDashboard","currency","get","getTrendingDashboard","getCoin","coinId","getGraphData","days","prices"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,YAA5B,C,CAEA;;AACA,MAAMC,YAAY,GAAG,MAAM;AACvB,MAAIC,SAAJ;AACA,QAAMC,OAAO,GAAGC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,GAAtB,CAAhB;;AACA,OAAK,IAAID,MAAT,IAAmBF,OAAnB,EAA4B;AACxB,UAAMI,MAAM,GAAGF,MAAM,CAACC,KAAP,CAAa,GAAb,CAAf;;AACA,QAAIC,MAAM,CAAC,CAAD,CAAN,CAAUC,IAAV,OAAqB,WAAzB,EAAsC;AAClCN,MAAAA,SAAS,GAAGK,MAAM,CAAC,CAAD,CAAlB;AACH;AACJ;;AACD,SAAOL,SAAP;AACH,CAVD;;AAaA,MAAMO,aAAa,GAAG,MAAOC,SAAP,IAAqB;AACvC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMD,SAAS,EAAhC;AACA,WAAOC,QAAQ,CAACC,IAAT,IAAiB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAxB;AACH,GAHD,CAGE,OAAOC,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAc,iBAAd,EAAiCF,CAAC,CAACH,QAAF,GAAaG,CAAC,CAACH,QAAf,GAA0BG,CAA3D;AACA,WAAO,IAAP;AACH;AACJ,CARD;;AAUA,MAAMG,YAAY,GAAG,MAAOC,QAAP,IAAoB;AACrC,MAAI,CAACA,QAAL,EAAe;AACXA,IAAAA,QAAQ,GAAG,KAAX;AACH;;AACD,SAAO,MAAMT,aAAa,CAAC,MAAMV,KAAK,CAACoB,GAAN,CAAW,8DAA6DD,QAAS,4DAAjF,CAAP,CAA1B;AAEH,CAND;;AAOA,MAAME,oBAAoB,GAAG,MAAOF,QAAP,IAAoB;AAC7C,MAAI,CAACA,QAAL,EAAe;AACXA,IAAAA,QAAQ,GAAG,KAAX;AACH;;AACD,SAAO,MAAMT,aAAa,CAAC,MAAMV,KAAK,CAACoB,GAAN,CAAW,8DAA6DD,QAAS,kFAAjF,CAAP,CAA1B;AAEH,CAND;;AAOA,MAAMG,OAAO,GAAG,MAAOC,MAAP,IAAkB;AAC9B,SAAO,MAAMb,aAAa,CAAC,MAAMV,KAAK,CAACoB,GAAN,CAAW,0CAAyCG,MAAO,EAA3D,CAAP,CAA1B;AAEH,CAHD;;AAIA,MAAMC,YAAY,GAAG,OAAOD,MAAP,EAAeE,IAAf,EAAqBN,QAArB,KAAkC;AACnD,QAAMN,IAAI,GAAG,MAAMH,aAAa,CAAC,MAAMV,KAAK,CAACoB,GAAN,CAAW,0CAAyCG,MAAO,6BAA4BJ,QAAS,SAAQM,IAAK,EAA7G,CAAP,CAAhC;AACA,SAAOZ,IAAI,CAACa,MAAZ;AACH,CAHD;;AAIA,eAAe;AACXR,EAAAA,YADW;AAEXG,EAAAA,oBAFW;AAGXC,EAAAA,OAHW;AAIXE,EAAAA,YAJW;AAKXtB,EAAAA;AALW,CAAf","sourcesContent":["import axios from \"axios\";\nimport { CryptoState } from \"../Context\";\n\n// const {setIsAuthenticated} = CryptoState();\nconst getCSRFToken = () => {\n    let csrfToken\n    const cookies = document.cookie.split(';')\n    for (let cookie of cookies) {\n        const crumbs = cookie.split('=')\n        if (crumbs[0].trim() === 'csrftoken') {\n            csrfToken = crumbs[1]\n        }\n    }\n    return csrfToken\n}\n\n\nconst tryCatchFetch = async (axiosCall) => {\n    try {\n        const response = await axiosCall()\n        return response.data || {message: 'success'}\n    } catch (e) {\n        console.error(\"---- Error ----\", e.response ? e.response : e)\n        return null\n    }\n}\n\nconst getDashboard = async (currency) => {\n    if (!currency) {\n        currency = 'usd';\n    }\n    return await tryCatchFetch(() => axios.get(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=market_cap_desc&per_page=100&page=1&sparkline=false`))\n\n}\nconst getTrendingDashboard = async (currency) => {\n    if (!currency) {\n        currency = 'usd';\n    }\n    return await tryCatchFetch(() => axios.get(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=gecko_desc&per_page=10&page=1&sparkline=false&price_change_percentage=24h`))\n\n}\nconst getCoin = async (coinId) => {\n    return await tryCatchFetch(() => axios.get(`https://api.coingecko.com/api/v3/coins/${coinId}`))\n\n}\nconst getGraphData = async (coinId, days, currency) => {\n    const data = await tryCatchFetch(() => axios.get(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=${currency}&days=${days}`))\n    return data.prices\n}\nexport default {\n    getDashboard,\n    getTrendingDashboard,\n    getCoin,\n    getGraphData,\n    getCSRFToken,\n\n}"]},"metadata":{},"sourceType":"module"}